var _=Object.defineProperty;var b=(n,e,t)=>e in n?_(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var y=(n,e,t)=>b(n,typeof e!="symbol"?e+"":e,t);class w{static async processImage(e,t){var s,u,i,c,p,l;try{if(!t.appId||!t.appKey)throw new Error("App ID y App Key son requeridos");const r=new FormData;r.append("file",e);const d={include_math:t.includeMath??!0,include_latex:((s=t.outputFormats)==null?void 0:s.includes("latex"))??!0,include_mathml:((u=t.outputFormats)==null?void 0:u.includes("mathml"))??!0,include_text:((i=t.outputFormats)==null?void 0:i.includes("text"))??!0};Object.entries(d).forEach(([g,x])=>{r.append(g,String(x))});const m=`${this.API_BASE_URL}/text`,f={app_id:t.appId,app_key:t.appKey},a=await fetch(m,{method:"POST",headers:f,body:r});let o;const h=a.headers.get("content-type");return h&&h.includes("application/json")?o=await a.json():o=await a.text(),{status:a.status,data:o,error:a.ok?void 0:`Error ${a.status}: ${a.statusText}`,request:{url:m,method:"POST",headers:f,body:r,parameters:{file:{name:e.name,size:e.size,type:e.type},...d}}}}catch(r){return console.error("Error processing image with Mathpix:",r),{status:0,data:null,error:r instanceof Error?r.message:"Error desconocido",request:{url:`${this.API_BASE_URL}/text`,method:"POST",headers:{app_id:t.appId,app_key:t.appKey},body:new FormData,parameters:{file:{name:e.name,size:e.size,type:e.type},include_math:t.includeMath??!0,include_latex:((c=t.outputFormats)==null?void 0:c.includes("latex"))??!0,include_mathml:((p=t.outputFormats)==null?void 0:p.includes("mathml"))??!0,include_text:((l=t.outputFormats)==null?void 0:l.includes("text"))??!0}}}}}static validateImageFile(e){if(!["image/jpeg","image/jpg","image/png","image/gif","image/bmp","image/webp","application/pdf"].includes(e.type))return{valid:!1,error:"Tipo de archivo no soportado. Use JPG, PNG, GIF, BMP, WebP o PDF."};const s=10*1024*1024;return e.size>s?{valid:!1,error:"El archivo es demasiado grande. MÃ¡ximo 10MB."}:{valid:!0}}static formatResponseData(e){return typeof e=="string"?e:typeof e=="object"&&e!==null?JSON.stringify(e,null,2):String(e)}static extractConfidence(e){if(typeof e=="object"&&e!==null&&"confidence"in e){const t=e.confidence;if(typeof t=="number"&&t>=0&&t<=1)return t}return null}static formatConfidence(e){return e===null?"Confianza no disponible":`${Math.round(e*100)}%`}}y(w,"API_BASE_URL","https://api.mathpix.com/v3");export{w as M};
