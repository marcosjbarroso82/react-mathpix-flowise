import{a as n,p as u}from"./chunk-B7RQU5TL-mf8dp6A9.js";const i=n.createContext(void 0);function p({children:s}){const[e,r]=n.useState({showHeader:!0,showNavigation:!0,compactMode:!1});n.useEffect(()=>{const t=localStorage.getItem("ui-settings");if(t)try{const o=JSON.parse(t);r({showHeader:o.showHeader!==!1,showNavigation:o.showNavigation!==!1,compactMode:o.compactMode===!0})}catch(o){console.error("Error parsing UI settings:",o)}},[]);const a=t=>{r(t),localStorage.setItem("ui-settings",JSON.stringify(t))},c=()=>{const t={...e,showHeader:!e.showHeader};a(t)},g=()=>{const t={...e,showNavigation:!e.showNavigation};a(t)},d=()=>{const t={...e,compactMode:!e.compactMode};a(t)};return u.jsx(i.Provider,{value:{uiSettings:e,toggleHeader:c,toggleNavigation:g,toggleCompactMode:d,setUISettings:a},children:s})}function h(){const s=n.useContext(i);if(s===void 0)throw new Error("useUI must be used within a UIProvider");return s}export{p as U,h as u};
